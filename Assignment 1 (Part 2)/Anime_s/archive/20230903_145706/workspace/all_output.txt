Assumptions:
1. The genres and themes are predefined and are fetched from the MyAnimeList API.
2. The recommendation criteria is based on the highest rated anime in the selected genre or theme.
3. The design and layout of the web application is simple and user-friendly, with a dropdown menu for genres and themes, and a display area for the recommended anime.

The core classes, functions, methods that will be necessary are:

1. Anime: A class to represent an anime with attributes such as title, genre, theme, and rating.
2. AnimeList: A class to represent a list of anime. It has methods to add an anime, get an anime by genre or theme, and get the highest rated anime in a genre or theme.
3. fetch_anime_data: A function to fetch anime data from the MyAnimeList API.
4. create_dropdown_menu: A function to create a dropdown menu for genres and themes.
5. display_anime: A function to display the recommended anime.

Now, let's write the code for each file.

app.py
```python
from flask import Flask, render_template, request
from anime import Anime, AnimeList
from utils import fetch_anime_data, create_dropdown_menu, display_anime

app = Flask(__name__)

@app.route('/', methods=['GET', 'POST'])
def home():
    anime_list = AnimeList()
    fetch_anime_data(anime_list)
    genres, themes = create_dropdown_menu(anime_list)
    recommended_anime = None
    if request.method == 'POST':
        genre = request.form.get('genre')
        theme = request.form.get('theme')
        recommended_anime = anime_list.get_highest_rated(genre, theme)
    return render_template('index.html', genres=genres, themes=themes, anime=recommended_anime)

if __name__ == '__main__':
    app.run(debug=True)
```

anime.py
```python
class Anime:
    def __init__(self, title, genre, theme, rating):
        self.title = title
        self.genre = genre
        self.theme = theme
        self.rating = rating

class AnimeList:
    def __init__(self):
        self.anime_list = []

    def add_anime(self, anime):
        self.anime_list.append(anime)

    def get_anime_by_genre(self, genre):
        return [anime for anime in self.anime_list if anime.genre == genre]

    def get_anime_by_theme(self, theme):
        return [anime for anime in self.anime_list if anime.theme == theme]

    def get_highest_rated(self, genre, theme):
        genre_anime = self.get_anime_by_genre(genre)
        theme_anime = self.get_anime_by_theme(theme)
        return max(genre_anime + theme_anime, key=lambda anime: anime.rating)
```

utils.py
```python
import requests

def fetch_anime_data(anime_list):
    response = requests.get('https://api.jikan.moe/v3/genre/anime/1/1')
    data = response.json()
    for anime_data in data['anime']:
        anime = Anime(anime_data['title'], anime_data['genre'], anime_data['theme'], anime_data['score'])
        anime_list.add_anime(anime)

def create_dropdown_menu(anime_list):
    genres = set(anime.genre for anime in anime_list.anime_list)
    themes = set(anime.theme for anime in anime_list.anime_list)
    return genres, themes

def display_anime(anime):
    return f'Title: {anime.title}, Genre: {anime.genre}, Theme: {anime.theme}, Rating: {anime.rating}'
```

requirements.txt
```
Flask==1.1.2
requests==2.25.1
```

Please note that this is a simplified version of the application and does not include error handling, testing, and other best practices for a production-ready application.